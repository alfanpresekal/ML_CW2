function [ opti_function ] = optiParamFinder_traingd( topology, epochs,x,y,x2,y2 )
%Test different learning rates and return the f1 value.
%======================================================
%Train a NN for each learning rate.
    %Get the struct containing the different function tested
    input_functions       =    load('input_functions');
    %-----------------------------
    %Initialisation
    numberOfIterations    =    size(input_functions,2);
    netCell               =    cell(40,1);
    predictionsCell       =    cell(40,1); 
    confusionCell         =    cell(40,1);
    output                =    [];
    %-----------------------------
    %Creates the NN for all the topologies
    for i=1:numberOfIterations
        netCell(i)        =    {Create_NN(topology,input_functions{i},epochs,x,y)}; 
    %Get the predictions of all the NN on the validation set
        predictionsCell(j) = {testANN(netCell{j},x2)};
    end
    %Get the confusion matrix for each NN
    for k=1:numberOfIterations
       confusionCell(k) = {compare(predictionsCell{k},y2)};
    end
    %Get the confusion measures for each NN
    for l=1:numberOfIterations
        [recall, precision, Fone,CR] = ClassMeasure(build_confusion_matrix(confusionCell{l}));
         output = [output,Fone];
    end
end 